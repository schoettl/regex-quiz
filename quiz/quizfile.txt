#RE-1

Wofür stehen die Abkürzungen BRE und ERE?

[x] POSIX Extended Regular Expressions
[_] Perl Based Regular Expressions
[_] Expandable Regular Expressions
[x] POSIX Basic Regular Expressions


Basic Regular Expressions (BRE) und Extended Regular Expressions (ERE) sind im POSIX-Standard beschrieben und werden von Tools wie grep und vi implementiert.
http://www.regular-expressions.info/posix.html
Hint: Beide sind im POSIX-Standard definiert.

#RE-2

Sie wollen nur Dateien mit der Endung ".h" des aktuellen Verzeichnisses anzeigen.  Welche Befehle koennen Sie verwenden?

[_] `ls *.h`
[_] `ls | grep '*.h'`
[x] `ls | grep "\.h$"`
[_] `ls | grep *.h`

Genau genommen funktioniert nur der Befehl `ls | grep "\.h$"`

#RE-3

Was trifft auf den Regulären Ausdruck `/*/` zu?
(_) Ungültig: es muss ein Zeichen vor dem Stern stehen
(_) Gültig: der Stern heißt hier "beliebiger String"
(x) Gültig: der Stern hat hier keine besondere Bedeutung - mit dem Ausdruck findet man einfach Sterne

#RE-4

Wie verwendet man die POSIX Character Ranges?  Markieren Sie, wo sie richtig verwendet wurden.

[x] `[[:digit:]]+`
[x] `[_[:alpha:]][[:alnum:]]*`
[_] `[:alpha:]*`
[_] `0x[:xdigit:]+`

Richtig sind ... und ....  Beispielsweise entspricht die vordefinierte Character Range <code>[:alpha:]</code> <code>A-Za-z</code>, daher muss sie nochmal in eckige Klammern eingeschlossen werden: <code>[[:alpha:]]</code>.  Dadurch sind auch mehrere Ranges kombinierbar: <code>[[:alpha][:space:]]</code> (nur Buchstaben und Leerzeichen)

#RE-5

Bei Regulären Ausdrücken gibt es viele Dialekte.  Welcher der folgenden ist der (sprachlich) umangreichste?

(_) POSIX Basic Regular Expressions (BRE)
(_) POSIX Extended Regular Expesssions (ERE)
(x) Perl Compatible Regular Expressions (PCRE)

Pearl Compatible Regular Expressions (PCRE) ist eine Programmbibliothek für Reguläre Ausdrücke.  Der implementierte Dialekt ist ziemlich kompatibel mit den Regulären Ausdrücken der Programmiersprache Perl und ist damit viel umfangreicher als der POSIX-Standard.

#RE-6

Welche Zeichen findet der Reguläre Ausdruck `/[{,}().\+*?[$^-]/` (nach POSIX)?  Oder ist das ein Syntaxfehler?

(x) Jedes Zeichen (buchstabengetreu) zwischen der ersten öffnenden und der letzten schließenden eckigen Klammer
(_) Sytaxfehler: zumindest einige der Zeichen dürfen innerhalb eckiger Klammern so nicht verwendet werden
(_) Jedes Zeichen - außer "[", "^" und "-" (müssen entwertet werden)
(_) Jedes Zeichen - außer "^" und "-" (müssen entwertet werden)

Bei den Regulären Ausdrücken nach POSIX verlieren Metazeichen innerhalb eckiger Klammern (bracket expression) ihre besondere Bedeutung.  Die einzigen besonderen Zeichen zwischen eckigen Klammern sind "^", "-" und "]".  Diese müssen gegebenenfalls durch findige Platzierung ("clever placement") entwertet werden.  Zum Beispiel findet /[]^-]/ das Zeichen "]", "^" oder "-".

#RE-7

Was macht man (bei POSIX REs) um genau eines der Zeichen "^", "-" oder "]" zu finden?

[x] `/\^|-|]/`
[x] `/[]^-]/`
[_] `/[\^\-\]]/`

Innerhalb von eckigen Klammern (bracket expression) haben die üblichen Metazeichen keine besondere Bedeutung.  Damit leitet der Backslash ("\") hier auch keine Escape-Sequenz ein, er hat keine entwertende Wirkung.  Die besonderen Zeichen "^", "-" und "]" müssen durch findige Platzierung entwertet werden - oder durch Alternativen ("|") ausgedrückt werden.

#RE-8

Schreiben Sie einen einfachen Regulären Ausdruck, um TODO-, FIXME- und XXX-Kommentare im Quellcode zu finden.  Solche Kommentare sehen z. B. so aus: // TODO exception abfangen

___ /\/\/.*\(TODO\|FIXME\|XXX\)/

Ein einfacher Regulärer Ausdruck für diesen Zweck wäre `// (TODO|FIXME|XXX)`

#RE-9

Was bewirkt folgender Befehl: `grep -rnE 'RE' .`

[x] Im aktuellen Verzeichnis (`.`) werden rekursiv (`-r`) Dateien durchsucht.
[_] Dateien werden nach dem nach dem Regulären Ausdruck `.` durchsucht.
[x] Bei jedem Fund wird die Zeilennummer mitangezeigt (`-n`).
[x] Der Reguläre Ausdruck `RE` wird als Extended Regular Expression (`-E`) interpretiert.
[_] Die Ausgabe des Befehls ist die Anzahl der gefundenen Zeilen (`-n`)

Der letzte Parameter des Aufrufs von grep ist der Dateiname.  Daher ist die die Antwort falsch, die sagt dass nach dem Regulären Ausdruck `.` gesucht wird.  Die Option `-n, --line-number` sorgt dafür, dass die Zeilenzahl zu jedem Fund mitangezeigt wird.  Die Option `-c, --count` zeigt statt der normalen Ausgabe die Anzahl der gefundenen Zeilen an.

#RE-10

Sie wollen alle C-Makros (#xxx) finden, die *nicht* der Konvention folgen, wonach Makros linksbündig (am Zeilenanfang) stehen.
grep -rn '[[:space:]]+#[_[:alpha:]][_[:alnum:]]*' .
recursive in current dir, with line numbers, search for one or more space followed by '#' and an identifier

#RE-11

Wie viele der folgenden Dateien findet der Reguläre Ausdruck `/.c/`?

* .config
* main.c
* main.h
* module.cpp
* cassert
* ascii.txt

___ /4/

Der Punkt steht für genau ein beliebiges Zeichen.  Daher findet der Ausdruck alle Dateien, die im Namen ein kleines C haben, das aber nicht am Anfang steht.
