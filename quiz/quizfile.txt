#RE-1

Wofür stehen die Abkürzungen BRE und ERE?

[x] POSIX Extended Regular Expressions
[_] Perl Based Regular Expressions
[_] Expandable Regular Expressions
[x] POSIX Basic Regular Expressions

Basic Regular Expressions (BRE) und Extended Regular Expressions (ERE) sind im POSIX-Standard beschrieben und werden von Tools wie grep und vi implementiert.
http://www.regular-expressions.info/posix.html
Hint: Beide sind im POSIX-Standard definiert.

#RE-2

Sie wollen nur Dateien mit der Endung ".h" des aktuellen Verzeichnisses anzeigen.  Welche Befehle ko;nnen Sie verwenden?

[_] `ls *.h`
[_] `ls | grep '*.h'`
[x] `ls | grep "\.h$"`
[_] `ls | grep *.h`

Genau genommen funktioniert nur der Befehl `ls | grep "\.h$"`.  Das Problem bei `ls *.h` ist, dass es auch den Verzeichnisinhalt eines Verzeichnisses "directory.h" anzeigt.

#RE-3

Was trifft auf den Regulären Ausdruck `*` zu?

(_) Ungültig: es muss ein Zeichen vor dem Stern stehen
(_) Gültig: der Stern heißt hier "beliebiger String"
(x) Gültig: der Stern hat hier keine besondere Bedeutung - mit dem Ausdruck findet man einfach Sterne

Im Allgemeinen bedeutet das Metazeichen "Stern", dass das vorhergehende Zeichen beliebig oft vorkommen darf.  In unserem Fall gibt es aber kein vorhergehendes Zeichen gibt.  Dann zählt bei vielen POSIX-RE-Implementierungen der Stern nicht als Metazeichen, sondern als ganz normales Zeichen.

#RE-4

Wie verwendet man die POSIX Character Ranges?  Markieren Sie, wo sie richtig verwendet wurden.

[x] `[[:digit:]]+`
[x] `[_[:alpha:]][_[:alnum:]]*`
[_] `"[:alpha:]*"`
[_] `0x[:xdigit:]+`
[x] `[[:alpha:][:digit:]]`

Die vordefinierte Character Range `[:alpha:]` entspricht ungefähr `A-Za-z`, daher muss sie nochmal in eckige Klammern eingeschlossen werden: `[[:alpha:]]`.  Somit sind auch mehrere Ranges kombinierbar: `[[:alpha][:space:]]` (findet Buchstaben und Leerzeichen)

#RE-5

Bei Regulären Ausdrücken gibt es viele Dialekte.  Welcher der folgenden ist der (sprachlich) umangreichste?

(_) POSIX Basic Regular Expressions (BRE)
(_) POSIX Extended Regular Expesssions (ERE)
(x) Perl Compatible Regular Expressions (PCRE)

Pearl Compatible Regular Expressions (PCRE) ist eine Programmbibliothek für Reguläre Ausdrücke.  Der implementierte Dialekt ist ziemlich kompatibel mit den Regulären Ausdrücken der Programmiersprache Perl und ist damit viel umfangreicher als der POSIX-Standard.

#RE-6

Welche Zeichen findet der Reguläre Ausdruck `[{,}().\+*?[$^-]` (nach POSIX)?  Oder ist das ein Syntaxfehler?

(x) Jedes Zeichen (buchstabengetreu) zwischen der ersten öffnenden und der letzten schließenden eckigen Klammer
(_) Syntaxfehler: die meisten der Zeichen dürfen innerhalb eckiger Klammern so nicht verwendet werden
(_) Syntaxfehler: "[", "^" und "-" müssen mit Backslash entwertet werden
(_) Syntaxfehler: "^" und "-" müssen mit Backslash entwertet werden

Bei den Regulären Ausdrücken nach POSIX verlieren Metazeichen innerhalb eckiger Klammern (bracket expression) ihre besondere Bedeutung.  Die einzigen besonderen Zeichen zwischen eckigen Klammern sind "^", "-" und "]".  Diese müssen gegebenenfalls durch findige Platzierung ("clever placement") entwertet werden.  Zum Beispiel findet `[]^-]` das Zeichen "]", "^" oder "-".  Eine Entwertung mit dem Escape Character Backslash ist nach POSIX nicht hier nicht möglich, denn auch der Backslash ist innerhalb eckiger Klammern nur ein Backslash.

#RE-7

Was macht man (bei POSIX REs) um genau eines der Zeichen "^", "-" oder "]" zu finden?

[x] `\^|-|]`
[x] `[]^-]`
[_] `[\^\-\]]`

Innerhalb von eckigen Klammern (bracket expression) haben die üblichen Metazeichen keine besondere Bedeutung.  Damit leitet der Backslash ("\") hier auch keine Escape-Sequenz ein, er hat keine entwertende Wirkung.  Die besonderen Zeichen "^", "-" und "]" müssen durch findige Platzierung entwertet werden - oder durch Alternativen ("|") ausgedrückt werden.

#RE-8

FIXME

Schreiben Sie einen einfachen Regulären Ausdruck, um TODO-, FIXME- und XXX-Kommentare im Quellcode zu finden.  Solche Kommentare sehen z. B. so aus: // TODO exception abfangen

___ /\/\/.*\(TODO\|FIXME\|XXX\)/

Ein einfacher Regulärer Ausdruck für diesen Zweck wäre `// (TODO|FIXME|XXX)`

#RE-9

Was bewirkt folgender Befehl: `grep -rnE 'RE' .`

[x] Im aktuellen Verzeichnis (`.`) werden rekursiv (`-r`) Dateien durchsucht.
[_] Dateien werden nach dem nach dem Regulären Ausdruck `.` durchsucht.
[x] Bei jedem Fund wird die Zeilennummer mitangezeigt (`-n`).
[x] Der Reguläre Ausdruck `RE` wird als Extended Regular Expression (`-E`) interpretiert.
[_] Die Ausgabe des Befehls ist die Anzahl der gefundenen Zeilen (`-n`)

Der letzte Parameter des Aufrufs von grep ist der Dateiname.  Daher ist die die Antwort falsch, die sagt dass nach dem Regulären Ausdruck `.` gesucht wird.  Die Option `-n, --line-number` sorgt dafür, dass die Zeilenzahl zu jedem Fund mitangezeigt wird.  Die Option `-c, --count` zeigt statt der normalen Ausgabe die Anzahl der gefundenen Zeilen an.

#RE-10

Sie wollen alle C-Makros (z.B. `#define`) finden, die *nicht* der Konvention folgen, wonach Makros linksbündig (am Zeilenanfang) stehen.  Erledigt folgender Befehl diese Aufgabe?

    grep -rn '^[[:space:]]+#[_[:alpha:]][_[:alnum:]]*' .

Hinweise zu den Optionen: `-r` und `.` -- recursive in `$(pwd)`, `-n` -- with line numbers

0/1 1

Jep, der Aufruf ist funktioniert und zeigt alle Zeilen an, in denen Makros nicht am Zeilenanfang stehen.  

#RE-11

Wie viele der folgenden Dateien findet der Reguläre Ausdruck `.c`?

* .config
* main.c
* main.h
* module.cpp
* cassert
* ascii.txt

___ /4/

Der Punkt steht für genau ein beliebiges Zeichen.  Daher findet der Ausdruck alle Dateien, die im Namen ein kleines C haben, das aber nicht am Anfang steht.

#RE-12

Wie viele der folgenden Dateien werden mit dem Regulra;rem Ausdruck `.*` gefunden.

* .gitignore
* README
* COPYING
* manual.pdf

___ /4/

Der Punkt steht fu;r ein beliebiges Zeichen.  Der Stern bedeutet "beliebig oft".  Daher findet der Ausdruck alle Dateien.

#RE-13

In den offiziellen Naming Conventions der Programmiersprache Java ist festgelegt, dass alle Konstanten rein aus Großbuchstaben, Ziffern und Unterstrichen bestehen, wobei die Unterstriche Wörter trennen.  In Java beginnen Konstanten zudem nicht mit einem Unterstrich.  Welcher der folgenden Regulären Ausdrücken (PCRE-Syntax) findet solche Konstanten?

(x) `\b[A-Z\d]+(_[A-Z\d]+)*\b`
(_) `\b([A-Z[:digit:]]+_)+\b`
(_) `\b[A-Z\d]*(_[A-Z\d]*)*\b`

`\b` steht für "word boundary" und bedeutet, dass der dazwischenliegende Ausdruck als eigenes Wort vorkommen muss.  Ein Wort wird u.a. durch Leerzeichen und Sonderzeichen abgegrenzt.

`\d` steht bei PCRE und den meisten modernen RE-Dialekten für "digit", also eine Ziffer von 0 bis 9.

`+` erfordert im Gegensatz zu `*` mindestens ein Vorkommen des vorhergehenden Zeichens, und das ist hier wichtig.

#RE-14

Mit welchem der folgeden Regula;ren Ausdru;cken finden Sie unter UNIX versteckte Dateien, die mit `ls -A` aufgelistet sind.

(_) `.[[:alnum:]]*`
(x) `\..*`
(_) `\.*`
(_) `.*`

Versteckte Dateien beginnen mit einem Punkt.  Das Metazeichen "Punkt" steht bei Regula;ren Ausdru;cken fu;r ein beliebiges Zeichen.  Deshalb muss es mit dem Backslash entwertet werden.  Mit dem folgenden `.*` werden die u;brigen Zeichen im Dateinamen konsumiert.

#RE-15

Die offiziellen Naming Conventions der Programmiersprache Java fordern, dass bei Akronymen immer nur der erste Buchstabe groß geschrieben wird, z.B. `getUrl` statt `getURL`.  Schreiben Sie einen PCRE-Ausdruck, der

* möglichst einfach
* Verstöße in Methodennamen findet. (Methodennamen beginnen mit einem Kleinbuchstaben.)
* Verwenden Sie am Anfang und Ende Ihres Ausdrucks `\b` ("word boundary").
* Gehen Sie davon aus, dass die Methodennamen nur aus `[a-zA-Z]` bestehen.

___ /\\b\(\[a-z\]\+\[A-Z\]\?\)\+\\b/

Natürlich gibt es hier viele Lösungen.  Die knappeste die alle obigen Bedingungen erfüllt dürfte wohl diese sein: `\b([a-z]+[A-Z]?)+\b`

Ob Ihre Lösung auch funktioniert können Sie z.B. hier testen: https://www.debuggex.com/

#RE-16

Schreiben Sie einen Regulären Ausdruck, der die Maus in folgendem Satz findet: "Wo ist die Maus?"

___ /Maus/

Um ein Wort zu finden, die keine RE-Metazeichen enthält, ergibt sich ein ganz einfacher Regulärer Ausdruck: `Maus`

#RE-17

Sie wollen in einer Quelldatei unnötige Leerzeichen am Zeilenende entfernen.  (Achtung, nicht bei Markdown anwenden, da hier zwei Leerzeichen am Zeilende einen Zeilenumbruch darstellen.)

Sie verwenden dazu folgenden Aufruf: `sed -i 's/RE//' main.c`

Dabei steht `-i` für "in-place" (es wird direkt die Datei geändert), `'s/...` für "substitute" und `RE` für einen Regulären Ausdruck, der Leerzeichen am Zeilenende findet.  Wie muss der Ausdruck für `RE` aussehen?

___ /^\[\[:space:]]\+\$$/

Die einfachste Möglichkeit (mit POSIX RE) ist wohl: `[[:space:]]+$`

Eingesetzt in den Aufruf oben werden dadurch alle Leerzeichen am Zeilenende durch den Leeren String ersetzt.

#RE-18

Sie wollen die "Source Lines Of Code" (SLOC) Ihres Programms wissen -- allerdings sollen Leerzeilen *nicht* mitzählen.  Sie verwenden den folgenden Aufruf:

    cat main.c | grep -v 'RE' | wc -l

Beachten Sie die Option `-v` ("invert match").  grep lässt damit nur Zeilen durch, auf die der Reguläre Ausdruck `RE` *nicht* passt.  Wie muss der `RE` aussehen?

___ /^\^\[\[:space:]]\*\$$/

Die einfachste Möglichkeit (mit POSIX RE) ist wohl: `^[[:space:]]*$`.  Damit werden Leerzeilen gefunden, die durch die Option `-v` in grep herausgefiltert, also *nicht* durchgereicht werden.

#RE-19

Sie mussten mit englischem Tastaturlayout einen deutschen Text schreiben :/  Für die Umlaute (äöü...) haben Sie am Anfang noch HTML-Entities verwendet (`&auml;` usw.), später dann `ae;` und gegen Ende nur noch `a;` -- mit dem Hintergedanken, diese Zeichen später einfach ersetzen zu können.

Sie verwenden folgenden Aufruf um in der Datei erst einmal alle "ä" richtigzustellen: `sed 's/RE/ä/' ba.tex`

Also welchen Regulären Ausdruck verwenden Sie am ehesten für `RE`?

(x) `(&auml;|ae;|a;)`
(_) `[&auml;|ae;|a;]`

Zur Wiederholung: Eckige Klammern sind nur für *einzelne* Zeichen gedacht.

Einwände sind berechtigt:  Wenn der Text z.B. die Quellcodezeile `int i = a;` enthält führt die Ersetzung zu unerwünschten Ergebnissen.  Eine bessere Möglichkeit:

Umlaute -- abgesehen von "ß" -- kommen normalerweise nicht als letzter Buchstabe eines Wortes vor.  Der Reguläre Ausdruck `(&auml;|ae;|a;)([[:alpha:]])` würde also nur die Umlaute *in* einem Wort finden.  Das gibt zunächst beim Ersetzen Probleme, denn der folgende Buchstabe verschwindet dann auch.  Dafür gibt es aber die Möglichkeit der sich im "replacement" mit `\2` auf die zweite, durch runde Klammern definierten Gruppe zu beziehen ("backreferences").  Siehe `man sed`.

#RE-20

Welche der folgenden Aufrufe von grep lassen nur Nicht-Leerzeilen durch?

[_] `grep '.*'`
[x] `grep -v '^$'`
[x] `grep '.+'`

`grep '.*'` lässt alle Zeilen durch, in denen null oder mehr beliebige Zeichen stehen.  Damit werden auch Leerzeilen durchgelassen.  Die anderen beiden Aufrufe funktionieren wie gefordert und verwerfen Leerzeilen.  Der Aufruf mit der Option `-v` (für "invert match") findet mit dem Regulären Ausdruck `^$` Leerzeilen, und lässt eben diese *nicht* durch.

#RE-21

`grep -P '^\s*#' script.sh` -- Welche grep-Option fehlt hier, wenn der Aufruf alle Kommentare im Shell-Skript *entfernen* soll?

___ /-v|--invert-match/

Mit dem obigen Aufruf werden Kommentarzeilen nicht entfernt, sondern im Gegenteil alle anderen Zeilen entfernt.  Um das Verhalten zu invertieren verwendet man die Option `-v`, `--invert-match`.

Die Option `-P` bedeutet, dass der Reguläre Ausdruck als _P_erl Compatible Regular Expression (PCRE) interpretiert wird.  Bei PCRE bedeutet `\s` "whitespace character".

Optionen, die nur aus einem Buchstaben bestehen lassen sich kombinieren.  Ein korrekter Aufruf wäre also: `grep -vP '^\s*#' script.sh`

#RE-22

grep -E
-F
-P
